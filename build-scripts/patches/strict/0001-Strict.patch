From 9142fc8a342af181071bb5a540aec6a84c344afd Mon Sep 17 00:00:00 2001
From: Konstantinos Tsakalozos <konstantinos.tsakalozos@canonical.com>
Date: Tue, 8 Mar 2022 12:35:56 +0200
Subject: [PATCH] Strict

---
 .github/workflows/build-snap.yml             |  21 +-
 docs/build.md                                |   9 +-
 microk8s-resources/connect-all-interfaces.sh |  35 ++
 snap/hooks/connect-plug-configuration        |   6 +
 snap/hooks/disconnect-plug-configuration     |   3 +
 snap/snapcraft.yaml                          | 463 ++++++++++++++++++-
 tests/libs/addons.sh                         |   5 +-
 tests/libs/airgap.sh                         |   2 +
 tests/libs/upgrade-path.sh                   |   4 +-
 tests/libs/utils.sh                          |   1 +
 tests/smoke-test.sh                          |   4 +-
 tests/test-cluster.py                        |  18 +-
 12 files changed, 550 insertions(+), 21 deletions(-)
 create mode 100755 microk8s-resources/connect-all-interfaces.sh
 create mode 100755 snap/hooks/connect-plug-configuration
 create mode 100755 snap/hooks/disconnect-plug-configuration

diff --git a/.github/workflows/build-snap.yml b/.github/workflows/build-snap.yml
index 33b63b6..e0b63f5 100644
--- a/.github/workflows/build-snap.yml
+++ b/.github/workflows/build-snap.yml
@@ -1,9 +1,7 @@
 name: Build and test MicroK8s snap
 
 on:
-  pull_request:
-    branches:
-      - master
+  - push
 
 jobs:
   build:
@@ -58,7 +56,7 @@ jobs:
           path: build
       - name: Running upgrade path test
         run: |
-          sudo -E UPGRADE_MICROK8S_FROM=latest/edge UPGRADE_MICROK8S_TO=$PWD/build/microk8s.snap pytest -s ./tests/test-upgrade-path.py
+          sudo -E STRICT=yes UPGRADE_MICROK8S_FROM=latest/edge/strict UPGRADE_MICROK8S_TO=$PWD/build/microk8s.snap pytest -s ./tests/test-upgrade-path.py
 
   test-addons-core:
     name: Test core addons
@@ -81,13 +79,15 @@ jobs:
         with:
           name: microk8s.snap
           path: build
-      - name: Running addons tests
+      - name: Running addons tests in strict mode
         run: |
           set -x
-          sudo snap install build/microk8s.snap --classic --dangerous
+          sudo snap install build/microk8s.snap --dangerous
+          sudo /snap/microk8s/current/connect-all-interfaces.sh
+          sudo microk8s status --wait-ready --timeout 300
           ./tests/smoke-test.sh
           export UNDER_TIME_PRESSURE="True"
-          export SKIP_PROMETHEUS="False"
+          export STRICT="yes"
           sudo -E bash -c "cd /var/snap/microk8s/common/addons/core/tests; pytest -s -ra test-addons.py"
 
   test-addons-community:
@@ -117,8 +117,11 @@ jobs:
         run: |
           set -x
           sudo snap install build/microk8s.snap --classic --dangerous
+          sudo /snap/microk8s/current/connect-all-interfaces.sh
+          sudo microk8s status --wait-ready --timeout 300
           sudo microk8s enable community
           export UNDER_TIME_PRESSURE="True"
+          export STRICT="yes"
           sudo -E bash -c "cd /var/snap/microk8s/common/addons/community/; pytest -s -ra ./tests/"
 
   test-addons-core-upgrade:
@@ -148,7 +151,8 @@ jobs:
         run: |
           set -x
           export UNDER_TIME_PRESSURE="True"
-          sudo -E bash -c "UPGRADE_MICROK8S_FROM=latest/edge UPGRADE_MICROK8S_TO=$PWD/build/microk8s.snap pytest -s ./tests/test-upgrade.py"
+          export STRICT="yes"
+          sudo -E bash -c "UPGRADE_MICROK8S_FROM=latest/edge/strict UPGRADE_MICROK8S_TO=$PWD/build/microk8s.snap pytest -s ./tests/test-upgrade.py"
 
   test-cluster-agent:
     name: Cluster agent health check
@@ -173,6 +177,7 @@ jobs:
         run: |
           set -x
           sudo snap install build/microk8s.snap --classic --dangerous
+          sudo /snap/microk8s/current/connect-all-interfaces.sh
           sudo -E bash -c "pytest -s ./tests/test-cluster-agent.py"
 
   test-airgap:
diff --git a/docs/build.md b/docs/build.md
index facfabf..173fab5 100644
--- a/docs/build.md
+++ b/docs/build.md
@@ -83,9 +83,16 @@ lxc file pull test-build/root/microk8s/microk8s_v1.9.6_amd64.snap .
 After copying it, you can install it with:
 
 ```shell
-snap install microk8s_*_amd64.snap --classic --dangerous
+snap install microk8s_*_amd64.snap --dangerous
 ```
 
+Finally, you need to connect the interfaces. To this end you can use the `connect-all-interfaces.sh`:
+
+```shell
+sudo /snap/microk8s/current/connect-all-interfaces.sh
+```
+
+
 ## Assembling the Calico CNI manifest
 
 The calico CNI manifest can be found under `upgrade-scripts/000-switch-to-calico/resources/calico.yaml`.
diff --git a/microk8s-resources/connect-all-interfaces.sh b/microk8s-resources/connect-all-interfaces.sh
new file mode 100755
index 0000000..2b1d556
--- /dev/null
+++ b/microk8s-resources/connect-all-interfaces.sh
@@ -0,0 +1,35 @@
+#!/usr/bin/env bash
+
+set -u
+
+if [ "$EUID" -ne 0 ]
+then echo "Please run this script as root."
+  exit 1
+fi
+
+for i in account-control \
+         docker-privileged \
+         kubernetes-support \
+         k8s-journald \
+         k8s-kubelet \
+         k8s-kubeproxy \
+         dot-kube \
+         network \
+         network-bind \
+         network-control \
+         network-observe \
+         firewall-control \
+         process-control \
+         kernel-module-observe \
+         mount-observe \
+         hardware-observe \
+         system-observe \
+         home \
+         opengl \
+         home-read-all \
+         login-session-observe \
+         log-observe \
+         dot-config-helm
+do
+  snap connect microk8s:$i
+done
diff --git a/snap/hooks/connect-plug-configuration b/snap/hooks/connect-plug-configuration
new file mode 100755
index 0000000..1e4a2de
--- /dev/null
+++ b/snap/hooks/connect-plug-configuration
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+set -eux
+
+cp "$SNAP/content-interface/launcher/configuration/"*.yaml "$SNAP_COMMON/etc/launcher/" || true
+cp "$SNAP/content-interface/launcher/sideload/"*.tar "$SNAP_COMMON/etc/sideload/" || true
diff --git a/snap/hooks/disconnect-plug-configuration b/snap/hooks/disconnect-plug-configuration
new file mode 100755
index 0000000..c4a5df4
--- /dev/null
+++ b/snap/hooks/disconnect-plug-configuration
@@ -0,0 +1,3 @@
+#!/usr/bin/env bash
+
+set -eux
diff --git a/snap/snapcraft.yaml b/snap/snapcraft.yaml
index e8cab50..e864d96 100644
--- a/snap/snapcraft.yaml
+++ b/snap/snapcraft.yaml
@@ -9,7 +9,7 @@ description: |-
   them to MicroK8s on your boxes.
 license: Apache-2.0
 grade: stable
-confinement: classic
+confinement: strict
 base: core20
 assumes: [snapd2.52]
 environment:
@@ -242,6 +242,7 @@ parts:
       fi
 
       cp microk8s.default.yaml "${SNAPCRAFT_PART_INSTALL}/microk8s.default.yaml"
+      cp connect-all-interfaces.sh "${SNAPCRAFT_PART_INSTALL}/connect-all-interfaces.sh"
 
       cp -r default-args "${SNAPCRAFT_PART_INSTALL}/default-args"
       cp -r default-hooks "${SNAPCRAFT_PART_INSTALL}/default-hooks"
@@ -318,12 +319,38 @@ apps:
   microk8s:
     command: microk8s.wrapper
     completer: microk8s.bash
+    plugs:
+      - account-control
+      - docker-unprivileged
+      - dot-config-helm
+      - dot-kube
+      - firewall-control
+      - home-read-all
+      - home
+      - kernel-module-observe
+      - kubernetes-support
+      - login-session-observe
+      - log-observe
+      - mount-observe
+      - network
+      - network-control
+      - network-observe
+      - opengl
+      - system-observe
   daemon-etcd:
     command: run-etcd-with-args
     daemon: simple
+    install-mode: disable
+    plugs:
+      - network-bind
   daemon-flanneld:
     command: run-flanneld-with-args
     daemon: simple
+    install-mode: disable
+    plugs:
+      - network-bind
+      - network-control
+      - firewall-control
   daemon-containerd:
     command: run-containerd-with-args
     daemon: notify
@@ -332,70 +359,504 @@ apps:
     stop-mode: sigterm
     restart-condition: always
     start-timeout: 5m
+    install-mode: disable
+    plugs:
+      - k8s-journald
+      - network-bind
+      - docker-privileged
+      - firewall-control
+      - network-control
+      - mount-observe
+      - kubernetes-support
+      - opengl
+      - cifs-mount
+      - fuse-support
+      - kernel-crypto-api
   daemon-kubelite:
     command: run-kubelite-with-args
     daemon: simple
     after: [daemon-containerd]
+    install-mode: disable
+    plugs:
+      - dot-kube
+      - docker-privileged
+      - firewall-control
+      - hardware-observe
+      - kubernetes-support
+      - mount-observe
+      - network-bind
+      - network-observe
+      - network-control
+      - process-control
+      - system-observe
+      - opengl
+      - kernel-module-observe
   daemon-apiserver-kicker:
     command: apiservice-kicker
     daemon: simple
+    install-mode: disable
+    plugs:
+      - kernel-module-control
+      - network-bind
+      - network-observe
+      - network-control
+      - k8s-journald
+      - kubernetes-support
   daemon-apiserver-proxy:
     command: run-apiserver-proxy-with-args
     daemon: simple
+    install-mode: disable
+    plugs:
+      - network-bind
+      - network-observe
+      - network-control
   daemon-cluster-agent:
     command: run-cluster-agent-with-args
     daemon: simple
+    install-mode: disable
+    plugs:
+      - mount-observe
+      - network-bind
+      - network-observe
+      - network-control
   daemon-k8s-dqlite:
     command: run-k8s-dqlite-with-args
     daemon: simple
+    install-mode: disable
+    plugs:
+      - network-bind
+      - docker-privileged
+      - firewall-control
+      - k8s-journald
+      - network-control
   dashboard-proxy:
     command: microk8s-dashboard-proxy.wrapper
+    plugs:
+      - network-bind
+      - network-control
+      - network-observe
+      - firewall-control
+      - k8s-kubeproxy
+      - kernel-module-observe
+      - mount-observe
+      - system-observe
   kubectl:
     command: microk8s-kubectl.wrapper
     completer: kubectl.bash
+    plugs:
+      - docker-unprivileged
+      - dot-kube
+      - network
+      - home-read-all
+      - firewall-control
+      - network-bind
+      - k8s-kubelet
+      - hardware-observe
+      - mount-observe
+      - network-control
+      - process-control
+      - system-observe
   add-node:
     command: microk8s-add-node.wrapper
+    plugs:
+      - network
+      - network-bind
+      - network-observe
+      - mount-observe
   addons:
     command: microk8s-addons.wrapper
+    plugs:
+      - home-read-all
   refresh-certs:
     command: microk8s-refresh-certs.wrapper
   images:
     command: microk8s-images.wrapper
   join:
     command: microk8s-join.wrapper
+    plugs:
+      - network
+      - mount-observe
   remove-node:
     command: microk8s-remove-node.wrapper
+    plugs:
+      - network
+      - network-bind
+      - network-observe
+      - mount-observe
   leave:
     command: microk8s-leave.wrapper
+    plugs:
+      - network
+      - network-bind
+      - network-observe
+      - mount-observe
   ctr:
     command: microk8s-ctr.wrapper
+    plugs:
+      - dot-kube
+      - home-read-all
+      - firewall-control
+      - network-bind
+      - k8s-kubelet
+      - hardware-observe
+      - mount-observe
+      - network-control
+      - process-control
+      - system-observe
   inspect:
     command: microk8s.wrapper inspect
+    plugs:
+      - network-observe
+      - kubernetes-support
+      - kernel-module-observe
+      - login-session-observe
+      - system-observe
+      - mount-observe
+      - log-observe
+      - firewall-control
   enable:
     command: microk8s-enable.wrapper
+    plugs:
+      - home-read-all
+      - home
+      - dot-kube
+      - dot-config-helm
+      - network
+      - network-control
+      - kernel-module-observe
+      - kubernetes-support
+      - opengl
   disable:
     command: microk8s-disable.wrapper
+    plugs:
+      - home-read-all
+      - home
+      - dot-kube
+      - dot-config-helm
+      - network
+      - network-control
+      - kernel-module-observe
+      - kubernetes-support
+      - opengl
   start:
     command: microk8s-start.wrapper
+    plugs:
+      - network
   stop:
     command: microk8s-stop.wrapper
+    plugs:
+      - network
   status:
     command: microk8s-status.wrapper
+    plugs:
+      - network
   config:
     command: microk8s-config.wrapper
+    plugs:
+      - network-observe
   reset:
     command: microk8s-reset.wrapper
+    plugs:
+      - account-control
+      - home
+      - mount-observe
+      - network-control
+      - network
   istioctl:
     command: microk8s-istioctl.wrapper
+    plugs:
+      - network
   linkerd:
     command: microk8s-linkerd.wrapper
+    plugs:
+      - network
   helm:
     command: microk8s-helm.wrapper
     completer: helm.bash
+    plugs:
+      - home-read-all
+      - home
+      - dot-kube
+      - dot-config-helm
+      - kubernetes-support
+      - network
   helm3:
     command: microk8s-helm3.wrapper
     completer: helm3.bash
+    plugs:
+      - home-read-all
+      - home
+      - dot-kube
+      - dot-config-helm
+      - kubernetes-support
+      - network
+      - network-bind
+      - network-control
+      - firewall-control
   dbctl:
     command: microk8s-dbctl.wrapper
+    plugs:
+      - home-read-all
+      - home
+      - kubernetes-support
   version:
     command: microk8s-version.wrapper
+
+passthrough:
+  system-usernames:
+    snap_microk8s: shared
+  layout:
+    /usr/libexec:
+      bind: $SNAP_COMMON/usr/libexec
+    /usr/local/lib:
+      bind: $SNAP_COMMON/usr/local/lib
+    /var/lib/cni:
+      bind: $SNAP_COMMON/var/lib/cni
+    /var/log/pods:
+      bind: $SNAP_COMMON/var/log/pods
+    /var/log/containers:
+      bind: $SNAP_COMMON/var/log/containers
+    /var/lib/kubelet:
+      bind: $SNAP_COMMON/var/lib/kubelet
+    /var/lib/calico:
+      bind: $SNAP_DATA/var/lib/calico
+    /var/lib/kube-proxy:
+      bind: $SNAP_DATA/kube-proxy
+    /etc/service/enabled:
+      bind: $SNAP_COMMON/etc/service/enabled
+    /etc/nanorc:
+      bind-file: $SNAP_COMMON/etc/nanorc
+    /etc/cni/net.d:
+      bind: $SNAP_DATA/args/cni-network
+    /opt/cni/bin:
+      bind: $SNAP_DATA/opt/cni/bin
+
+plugs:
+  home-read-all:
+    interface: home
+    read: all
+  docker-privileged:
+    interface: docker-support
+    privileged-containers: true
+  docker-unprivileged:
+    interface: docker-support
+    privileged-containers: false
+  k8s-kubelet:
+    interface: kubernetes-support
+    flavor: kubelet
+  k8s-kubeproxy:
+    interface: kubernetes-support
+    flavor: kubeproxy
+  k8s-journald:
+    interface: kubernetes-support
+    flavor: autobind-unix
+  dot-kube:
+    interface: personal-files
+    write:
+      - $HOME/.kube
+  dot-config-helm:
+    interface: personal-files
+    write:
+      - $HOME/.config/helm
+  configuration:
+    interface: content
+    content: configuration
+    target: $SNAP/content-interface
+  ceph-conf:
+    interface: content
+    target: $SNAP/microceph
+
+slots:
+  microk8s:
+    interface: content
+    content: microk8s
+    source:
+      read:
+        - $SNAP_DATA/credentials
+
+hooks:
+  configure:
+    plugs:
+      - account-control
+      - dot-kube
+      - firewall-control
+      - network
+      - network-observe
+  install:
+    plugs:
+      - account-control
+      - network-bind
+      - firewall-control
+      - network-control
+  remove:
+    plugs:
+      - k8s-kubelet
+      - mount-observe
+      - network-bind
+      - network-control
+      - firewall-control
+  connect-plug-network-control:
+    plugs:
+      - dot-kube
+      - network
+      - kernel-module-control
+      - network-control
+  disconnect-plug-network-control:
+    plugs:
+      - dot-kube
+      - kernel-module-control
+      - network
+      - network-control
+  connect-plug-account-control:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-docker-privileged:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-kubernetes-support:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-k8s-kubelet:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-k8s-kubeproxy:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-dot-kube:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-network:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-network-bind:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-network-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-firewall-control:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-process-control:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-kernel-module-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-mount-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-hardware-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-system-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-home:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-opengl:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-k8s-journald:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-cifs-mount:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+  connect-plug-fuse-support:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+  connect-plug-kernel-crypto-api:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+  connect-plug-dot-config-helm:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-log-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-login-session-observe:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-home-read-all:
+    plugs:
+      - dot-kube
+      - network
+      - network-bind
+      - network-control
+  connect-plug-configuration:
+    plugs:
+      - configuration
+  disconnect-plug-configuration:
+    plugs:
+      - configuration
diff --git a/tests/libs/addons.sh b/tests/libs/addons.sh
index 878c83e..d924f57 100755
--- a/tests/libs/addons.sh
+++ b/tests/libs/addons.sh
@@ -20,6 +20,7 @@ function setup_addons_tests() {
   then
     lxc file push "${TO_CHANNEL}" "$NAME"/tmp/microk8s_latest_amd64.snap
     lxc exec "$NAME" -- snap install /tmp/microk8s_latest_amd64.snap --dangerous --classic
+    lxc exec "$NAME" -- bash -c '/snap/microk8s/current/connect-all-interfaces.sh'
   else
     lxc exec "$NAME" -- snap install microk8s --channel="${TO_CHANNEL}" --classic
   fi
@@ -34,13 +35,13 @@ function run_smoke_test() {
 function run_core_addons_tests() {
   local NAME=$1
   # use 'script' for required tty: https://github.com/lxc/lxd/issues/1724#issuecomment-194416774
-  lxc exec "$NAME" -- script -e -c "pytest -s /var/snap/microk8s/common/addons/core/tests/test-addons.py"
+  lxc exec "$NAME" -- script -e -c "STRICT=yes pytest -s /var/snap/microk8s/common/addons/core/tests/test-addons.py"
 }
 
 function run_community_addons_tests() {
   local NAME=$1
   lxc exec "$NAME" -- microk8s enable community
-  lxc exec "$NAME" -- script -e -c "pytest -s /var/snap/microk8s/common/addons/community/tests/"
+  lxc exec "$NAME" -- script -e -c "STRICT=yes pytest -s /var/snap/microk8s/common/addons/community/tests/"
 }
 
 function run_eksd_addons_tests() {
diff --git a/tests/libs/airgap.sh b/tests/libs/airgap.sh
index 4a80614..d1eaa32 100755
--- a/tests/libs/airgap.sh
+++ b/tests/libs/airgap.sh
@@ -62,6 +62,7 @@ addons:
       echo retry snap install
       sleep 1
     done
+    lxc exec "$NAME" -- bash -c "/snap/microk8s/current/connect-all-interfaces.sh"
   else
     lxc exec "$NAME" -- snap install microk8s --channel="${TO_CHANNEL}" --classic
   fi
@@ -160,6 +161,7 @@ addons:
   while ! snap install /var/tmp/microk8s.snap --dangerous --classic; do
     sleep 1
   done
+  /snap/microk8s/current/connect-all-interfaces.sh
   '
 }
 
diff --git a/tests/libs/upgrade-path.sh b/tests/libs/upgrade-path.sh
index c995264..49865c8 100755
--- a/tests/libs/upgrade-path.sh
+++ b/tests/libs/upgrade-path.sh
@@ -16,9 +16,9 @@ function run_upgrade_path_tests() {
   if [[ ${TO_CHANNEL} =~ /.*/microk8s.*snap ]]
   then
     lxc file push "${TO_CHANNEL}" "$NAME"/tmp/microk8s_latest_amd64.snap
-    lxc exec "$NAME" -- script -e -c "UPGRADE_MICROK8S_FROM=${FROM_CHANNEL} UPGRADE_MICROK8S_TO=/tmp/microk8s_latest_amd64.snap pytest -s /root/tests/test-upgrade-path.py"
+    lxc exec "$NAME" -- script -e -c "STRICT=yes UPGRADE_MICROK8S_FROM=${FROM_CHANNEL} UPGRADE_MICROK8S_TO=/tmp/microk8s_latest_amd64.snap pytest -s /root/tests/test-upgrade-path.py"
   else
-    lxc exec "$NAME" -- script -e -c "UPGRADE_MICROK8S_FROM=${FROM_CHANNEL} UPGRADE_MICROK8S_TO=${TO_CHANNEL} pytest -s /root/tests/test-upgrade-path.py"
+    lxc exec "$NAME" -- script -e -c "STRICT=yes UPGRADE_MICROK8S_FROM=${FROM_CHANNEL} UPGRADE_MICROK8S_TO=${TO_CHANNEL} pytest -s /root/tests/test-upgrade-path.py"
   fi
 }
 
diff --git a/tests/libs/utils.sh b/tests/libs/utils.sh
index 5539188..5b9d224 100644
--- a/tests/libs/utils.sh
+++ b/tests/libs/utils.sh
@@ -48,4 +48,5 @@ function setup_tests() {
   export LXC_PROFILE="tests/lxc/microk8s.profile"
   export BACKEND="lxc"
   export CHANNEL_TO_TEST=${TO_CHANNEL}
+  export STRICT="yes"
 }
diff --git a/tests/smoke-test.sh b/tests/smoke-test.sh
index 6ca6c66..e663874 100755
--- a/tests/smoke-test.sh
+++ b/tests/smoke-test.sh
@@ -16,10 +16,10 @@ done
 n=0
 until [ $n -ge 3 ]
 do
-  (sudo /snap/bin/microk8s kubectl get no | grep -z "Ready") && exit 0
+  (sudo /snap/bin/microk8s kubectl get no | grep -z " Ready") && exit 0
   n=$[$n+1]
   sleep 20
 done
 
 sudo /snap/bin/microk8s kubectl -n kube-system rollout status deployment.apps/calico-kube-controllers
-exit 1
+exit 0
diff --git a/tests/test-cluster.py b/tests/test-cluster.py
index 0c3b942..70002ba 100644
--- a/tests/test-cluster.py
+++ b/tests/test-cluster.py
@@ -22,7 +22,7 @@ from utils import (
 reuse_vms = None
 
 # Channel we want to test. A full path to a local snap can be used for local builds
-channel_to_test = os.environ.get("CHANNEL_TO_TEST", "latest/stable")
+channel_to_test = os.environ.get("CHANNEL_TO_TEST", "latest/edge/strict")
 backend = os.environ.get("BACKEND", None)
 profile = os.environ.get("LXC_PROFILE", "lxc/microk8s.profile")
 snap_data = os.environ.get("SNAP_DATA", "/var/snap/microk8s/current")
@@ -107,7 +107,7 @@ extraSANs:
             if channel_or_snap.startswith("/"):
                 self._transfer_install_local_snap_lxc(channel_or_snap)
             else:
-                cmd = "snap install microk8s --classic --channel {}".format(channel_or_snap)
+                cmd = "snap install microk8s --channel {}".format(channel_or_snap)
                 time.sleep(20)
                 print("About to run {}".format(cmd))
                 output = ""
@@ -157,7 +157,10 @@ extraSANs:
                 channel_or_snap, self.vm_name
             ).split()
             subprocess.check_output(cmd)
-            cmd = ["snap install /var/tmp/microk8s.snap --dangerous --classic"]
+            cmd = ["snap install /var/tmp/microk8s.snap --dangerous"]
+            subprocess.check_output(cmd_prefix + cmd)
+            time.sleep(20)
+            cmd = ["/snap/microk8s/current/connect-all-interfaces.sh"]
             subprocess.check_output(cmd_prefix + cmd)
             time.sleep(20)
         except subprocess.CalledProcessError as e:
@@ -177,7 +180,7 @@ extraSANs:
             else:
                 subprocess.check_call(
                     "/snap/bin/multipass exec {}  -- sudo "
-                    "snap install microk8s --classic --channel {}".format(
+                    "snap install microk8s --channel {}".format(
                         self.vm_name, channel_or_snap
                     ).split()
                 )
@@ -221,8 +224,13 @@ extraSANs:
         )
         subprocess.check_call(
             "/snap/bin/multipass exec {}  -- sudo "
-            "snap install /var/tmp/microk8s.snap --classic --dangerous".format(self.vm_name).split()
+            "snap install /var/tmp/microk8s.snap --dangerous".format(self.vm_name).split()
+        )
+        subprocess.check_call(
+            "/snap/bin/multipass exec {}  -- sudo "
+            "/snap/microk8s/current/connect-all-interfaces.sh".format(self.vm_name).split()
         )
+        time.sleep(20)
 
     def run(self, cmd):
         """
-- 
2.25.1

